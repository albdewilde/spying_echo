// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: proto/spying_echo.proto

package spyingechopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpyingEchoClient is the client API for SpyingEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpyingEchoClient interface {
	// Echo respond the thing you say
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	// Spy send all things that are say
	Spy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SpyingEcho_SpyClient, error)
}

type spyingEchoClient struct {
	cc grpc.ClientConnInterface
}

func NewSpyingEchoClient(cc grpc.ClientConnInterface) SpyingEchoClient {
	return &spyingEchoClient{cc}
}

func (c *spyingEchoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, "/spyingecho.SpyingEcho/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyingEchoClient) Spy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SpyingEcho_SpyClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpyingEcho_ServiceDesc.Streams[0], "/spyingecho.SpyingEcho/Spy", opts...)
	if err != nil {
		return nil, err
	}
	x := &spyingEchoSpyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpyingEcho_SpyClient interface {
	Recv() (*EchoReply, error)
	grpc.ClientStream
}

type spyingEchoSpyClient struct {
	grpc.ClientStream
}

func (x *spyingEchoSpyClient) Recv() (*EchoReply, error) {
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpyingEchoServer is the server API for SpyingEcho service.
// All implementations must embed UnimplementedSpyingEchoServer
// for forward compatibility
type SpyingEchoServer interface {
	// Echo respond the thing you say
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
	// Spy send all things that are say
	Spy(*Empty, SpyingEcho_SpyServer) error
	mustEmbedUnimplementedSpyingEchoServer()
}

// UnimplementedSpyingEchoServer must be embedded to have forward compatible implementations.
type UnimplementedSpyingEchoServer struct {
}

func (UnimplementedSpyingEchoServer) Echo(context.Context, *EchoRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedSpyingEchoServer) Spy(*Empty, SpyingEcho_SpyServer) error {
	return status.Errorf(codes.Unimplemented, "method Spy not implemented")
}
func (UnimplementedSpyingEchoServer) mustEmbedUnimplementedSpyingEchoServer() {}

// UnsafeSpyingEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpyingEchoServer will
// result in compilation errors.
type UnsafeSpyingEchoServer interface {
	mustEmbedUnimplementedSpyingEchoServer()
}

func RegisterSpyingEchoServer(s grpc.ServiceRegistrar, srv SpyingEchoServer) {
	s.RegisterService(&SpyingEcho_ServiceDesc, srv)
}

func _SpyingEcho_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyingEchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spyingecho.SpyingEcho/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyingEchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpyingEcho_Spy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpyingEchoServer).Spy(m, &spyingEchoSpyServer{stream})
}

type SpyingEcho_SpyServer interface {
	Send(*EchoReply) error
	grpc.ServerStream
}

type spyingEchoSpyServer struct {
	grpc.ServerStream
}

func (x *spyingEchoSpyServer) Send(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

// SpyingEcho_ServiceDesc is the grpc.ServiceDesc for SpyingEcho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpyingEcho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spyingecho.SpyingEcho",
	HandlerType: (*SpyingEchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _SpyingEcho_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Spy",
			Handler:       _SpyingEcho_Spy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/spying_echo.proto",
}
